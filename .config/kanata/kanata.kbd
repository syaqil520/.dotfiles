(defcfg
  process-unmapped-keys yes
)

(defsrc
  ;; left
       q    w    e    r    t    
  caps a    s    d    f    g    
       z    x    c    v    b    
  ;; right
       y    u    i    o    p    [    ]    \   
       h    j    k    l    ;    '          
       n    m    ,    .    /                  
  ;; thumb 
  spc              
)

(defvar
  tap-time 150
  hold-time 200

  tap-timeout 140
  hold-timeout 500

  streak-count 3
  streak-time 140
  chord-timeout 60
)

(deftemplate charmod (char mod)
  (switch 
    ((key-timing $streak-count less-than $streak-time)) $char break
    () (tap-hold-release-timeout $tap-timeout $hold-timeout $char $mod $char) break
  )
)

(defchords lmod-home-row $chord-timeout
  (a      ) a
  (  s    ) s
  (    d  ) d
  (      f) f
  (    d f) lctl
  (  s d  ) lalt
  (a s    ) lmet
  (  s   f) lsft
  (a s d  ) (multi lalt lsft)
  (  s d f) (multi lctl lalt)
  (a s d f) @meh
)

(defchords rmod-home-row $chord-timeout
  (j      ) j
  (  k    ) k
  (    l  ) l
  (      ;) ;
  (j k    ) rctl
  (  k l  ) lalt
  (    l ;) rmet
  (j   l  ) rsft
  (  k l ;) (multi lalt lsft)
  (j k l  ) (multi lctl lalt)
  (j k l ;) @meh
)

(defchords layer-mod $chord-timeout
  (q          ) q
  (  w        ) w
  (    e      ) e
  (      r    ) r
  (        spc) spc
  (  w     spc) (layer-while-held symbol)
  (    e   spc) (layer-while-held number)
  (      r spc) (layer-while-held system)
  (  w e      ) (layer-switch base)
  (    e r    ) (layer-switch symbol)
  (  w   r    ) (layer-switch number)
)

(defalias
  meh (multi ctl alt sft)

  escctrl (tap-hold 200 200 esc lctl)
  a (chord lmod-home-row a)
  s (chord lmod-home-row s)
  d (chord lmod-home-row d)
  f (chord lmod-home-row f)
  j (chord rmod-home-row j)
  k (chord rmod-home-row k)
  l (chord rmod-home-row l)
  ; (chord rmod-home-row ;)

  q (chord layer-mod q)
  w (chord layer-mod w)
  e (chord layer-mod e)
  r (chord layer-mod r)
  spc (chord layer-mod spc)

  ;; doesn't auto-repeat
  lparen (macro S-9)
  rparen (macro S-0)
  ;; {[()]}
  lbrace (unicode {)
  rbrace (unicode })
  lbrack (unicode [)
  rbrack (unicode ])
  ;; extra
  grave  (unicode `)
  tilde  (unicode ~)
  slash  (unicode /)
  pipe   (unicode |)
  backsl (unicode \)
  ex S-1
;;
  colon  (unicode :)
  semicl (unicode ;)
;;
  plus   (unicode +)
  equal  (unicode =)
  minus  (unicode -)
  unders (unicode _)
;;
  dot    (unicode .)
  comma  (unicode ,)
  q-mark (unicode ?)
;;
  at     (unicode @)
  hash   (unicode #)
;;
  dollar (unicode $)
;;
  percen (unicode %)
  caret  (unicode ^)
  ampers (unicode &)
;;
  apo    (unicode ')
;;
  gt     (unicode >)
  lt     (unicode <)
)

(deflayer base
  ;; left
            @q    @w   @e   @r    t    
  @escctrl @a    @s    @d    @f    g    
            z    x    c    v    b    
  ;; right
       y    u    i    o    p    [    ]    \   
       h    @j    @k    @l    @;    '          
       n    m    ,    .    /                  
  ;; thumb 
  @spc              
)

(deflayer symbol
  ;; left
      @q   @w   @e   @r    XX    
  XX lmet lalt lsft lctl XX    
      XX   XX    XX XX    XX    
  ;; right
       XX   @ex    @at    @hash    grv    [    ]    \   
       @caret    @ampers    @percen    @dollar    ;    '          
       @tilde    S-8    ,    .    /                  
  ;; thumb 
  @spc              
)

(deflayer number
  ;; left
        @q   @w   @e   @r    XX    
    XX lmet lalt lsft lctl XX    
        XX   XX    XX XX    XX    
  ;; right
       XX    7    8    9   XX    XX    XX    XX
       XX    4    5    6   XX    XX          
       0     1    2    3   XX            
  ;; thumb 
  @spc              
)

(deflayer system
  ;; left
        @q   @w   @e   @r    XX    
    XX lmet lalt lsft lctl XX    
        XX   XX    XX XX    XX    
  ;; right
       XX    XX    XX    XX   XX    XX    XX    XX
       XX    left    down   up   right    XX          
       XX    XX    XX    XX   XX            
  ;; thumb 
  @spc              
)

